// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from '@/types/supabase';

// Check if we're in a Lovable environment
const isLovable = import.meta.env.VITE_IS_LOVABLE === 'true' || 
                  window.location.hostname.includes('lovable.dev');

// Set up the Supabase URL and API key
const supabaseUrl = import.meta.env.VITE_SUPABASE_URL || 'https://ikreglaqlileqlmlgsao.supabase.co'
const supabaseKey = import.meta.env.VITE_SUPABASE_KEY || '';

let supabase: ReturnType<typeof createClient<Database>>;

try {
  // Create the Supabase client
  supabase = createClient<Database>(supabaseUrl, supabaseKey, {
    auth: {
      autoRefreshToken: true,
      persistSession: true,
      detectSessionInUrl: true
    }
  });
  
  console.log('Supabase client initialized successfully');
  
  // Add event listeners for Lovable environment
  if (isLovable) {
    console.log('Lovable environment detected. Adding error handlers...');
    window.addEventListener('unhandledrejection', (event) => {
      if (event.reason?.message?.includes('supabase') || 
          event.reason?.message?.includes('network') ||
          event.reason?.message?.includes('database')) {
        console.error('Supabase error caught:', event.reason);
        event.preventDefault(); // Prevent the default error handling
      }
    });
  }
} catch (error) {
  console.error('Failed to initialize Supabase client:', error);
  
  // Create a minimal mock client for Lovable
  if (isLovable) {
    console.warn('Creating fallback Supabase client');
    // @ts-ignore - Using any type for fallback
    supabase = {
      from: () => ({
        select: () => Promise.resolve({ data: [], error: null })
      }),
      auth: {
        getSession: () => Promise.resolve({ data: { session: null }, error: null }),
        signIn: () => Promise.resolve({ data: { user: null }, error: null }),
        signOut: () => Promise.resolve({ error: null })
      }
    };
  } else {
    // For non-Lovable environments, create an empty client but log the error
    // @ts-ignore - Using any type for fallback
    supabase = createClient<Database>(supabaseUrl, '');
  }
}

// Export the client
export { supabase };

// Export convenience auth hooks
export const auth = supabase.auth;