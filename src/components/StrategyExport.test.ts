// Test the export functionality
type StrategyOutput = {
  title: string;
  rules: string[];
  checklist: string[];
  warning?: string;
};

const testStrategy: StrategyOutput = {
  title: "Momentum Breakout Edge",
  rules: [
    "Enter on 1H candle close above breakout with volume spike",
    "Confirm breakout with RSI > 60 and rising momentum", 
    "Set stop-loss below consolidation low",
    "Take profit at 2:1 risk/reward ratio"
  ],
  checklist: [
    "Resistance level marked",
    "Volume validated",
    "News event cleared"
  ],
  warning: "⚠️ Risky near macro event—backtest cautiously."
};

// Test JSON export
export function testJSONExport(strategy: StrategyOutput): void {
  const jsonString = JSON.stringify(strategy, null, 2);
  console.log("=== JSON Export ===");
  console.log(jsonString);
  console.log("\n");
}

// Test Pine Script export
export function testPineScriptExport(strategy: StrategyOutput): void {
  const safeName = strategy.title.replace(/[^a-zA-Z0-9]/g, '_');
  
  const pineScript = `//@version=5
strategy("${strategy.title}", overlay=true)

// Strategy Rules:
${strategy.rules.map((rule, i) => `// ${i + 1}. ${rule}`).join('\n')}

// Entry Conditions
longCondition = close > high[1] // Placeholder condition

// Entry Logic
if (longCondition)
    strategy.entry("Long", strategy.long)

// Exit Logic
if (close < low[1]) // Placeholder exit
    strategy.close("Long")

// Risk Management
strategy.exit("Stop Loss", "Long", stop=low[1] * 0.98)

// Alerts
alertcondition(longCondition, title="Entry Signal", message="${strategy.title} - Entry Signal")`;

  console.log("=== Pine Script Export ===");
  console.log(pineScript);
  console.log("\n");
}

// Test MQL5 export
export function testMQL5Export(strategy: StrategyOutput): void {
  const safeName = strategy.title.replace(/[^a-zA-Z0-9]/g, '_');
  
  const mql5Code = `//+------------------------------------------------------------------+
//|                                             ${safeName}.mq5 |
//|                                    Generated by Insight Flow AI  |
//+------------------------------------------------------------------+
#property copyright "Insight Flow AI"
#property link      "https://insightflow.ai"
#property version   "1.00"

// Input parameters
input double   StopLoss = 50;      // Stop Loss in points
input double   TakeProfit = 100;   // Take Profit in points
input double   LotSize = 0.1;      // Lot size

// Global variables
int maHandle;

//+------------------------------------------------------------------+
//| Expert initialization function                                   |
//+------------------------------------------------------------------+
int OnInit()
{
   // Initialize indicators
   maHandle = iMA(_Symbol, _Period, 20, 0, MODE_EMA, PRICE_CLOSE);
   
   return(INIT_SUCCEEDED);
}

//+------------------------------------------------------------------+
//| Expert tick function                                             |
//+------------------------------------------------------------------+
void OnTick()
{
   // Strategy Rules:
${strategy.rules.map((rule, i) => `   // ${i + 1}. ${rule}`).join('\n')}

   // Placeholder trading logic
   double Close = iClose(_Symbol, _Period, 0);
   double High1 = iHigh(_Symbol, _Period, 1);
   
   // Entry condition (placeholder)
   if(Close > High1)
   {
      // Open buy position
      MqlTradeRequest request = {};
      MqlTradeResult result = {};
      
      request.action = TRADE_ACTION_DEAL;
      request.symbol = _Symbol;
      request.volume = LotSize;
      request.type = ORDER_TYPE_BUY;
      request.price = SymbolInfoDouble(_Symbol, SYMBOL_ASK);
      request.sl = request.price - StopLoss * _Point;
      request.tp = request.price + TakeProfit * _Point;
      
      OrderSend(request, result);
   }
}`;

  console.log("=== MQL5 Export ===");
  console.log(mql5Code.substring(0, 500) + "...\n[truncated for display]");
  console.log("\n");
}

// Run all export tests
export function runExportTests() {
  console.log("📤 Strategy Export Test Suite\n");
  console.log("Test Strategy:", testStrategy.title);
  console.log("─".repeat(50) + "\n");
  
  testJSONExport(testStrategy);
  testPineScriptExport(testStrategy);
  testMQL5Export(testStrategy);
  
  console.log("✅ All export formats generated successfully!");
  console.log("\nFile naming convention:");
  console.log("- JSON: momentum_breakout_edge_strategy_2024-01-15.json");
  console.log("- Pine: momentum_breakout_edge_strategy_2024-01-15.pine");
  console.log("- MQL5: momentum_breakout_edge_strategy_2024-01-15.mq5");
}

// Example of how to validate export content
export function validateExportContent(format: 'json' | 'pine' | 'mql5', content: string): boolean {
  switch (format) {
    case 'json':
      try {
        const parsed = JSON.parse(content);
        return parsed.title && Array.isArray(parsed.rules);
      } catch {
        return false;
      }
    
    case 'pine':
      return content.includes('//@version=5') && 
             content.includes('strategy(') &&
             content.includes('strategy.entry');
    
    case 'mql5':
      return content.includes('#property') &&
             content.includes('OnInit()') &&
             content.includes('OnTick()');
    
    default:
      return false;
  }
} 