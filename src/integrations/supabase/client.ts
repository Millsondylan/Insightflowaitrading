// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from '@/types/supabase';

// Check if we're in demo mode
const isDemoMode = import.meta.env.VITE_DEMO_MODE === 'true' || 
                   import.meta.env.VITE_USE_MOCK_DATA === 'true' ||
                   import.meta.env.DEV === true;

// Set up the Supabase URL and API key
const supabaseUrl = import.meta.env.VITE_SUPABASE_URL || 'https://ikreglaqlileqlmlgsao.supabase.co'
const supabaseKey = import.meta.env.VITE_SUPABASE_ANON_KEY || '';

// Validate the configuration
const hasValidConfig = supabaseUrl && 
                      supabaseKey && 
                      supabaseKey !== 'your_supabase_anon_key_here' &&
                      supabaseKey !== 'demo_anon_key_for_development' &&
                      !isDemoMode;

let supabase: ReturnType<typeof createClient<Database>>;

// Create a mock client for development/demo purposes
const createMockClient = () => {
  console.warn('üîß Using mock Supabase client - no real database connection');
  console.log('üìù This is normal for development/demo mode');
  
  return {
    from: (table: string) => ({
      select: (columns?: string) => {
        console.log(`üîç Mock select from ${table}`, columns);
        return Promise.resolve({ data: [], error: null });
      },
      insert: (data: any) => {
        console.log(`‚ûï Mock insert into ${table}`, data);
        return Promise.resolve({ data: null, error: null });
      },
      update: (data: any) => ({
        eq: (column: string, value: any) => {
          console.log(`‚úèÔ∏è Mock update ${table} where ${column} = ${value}`, data);
          return Promise.resolve({ data: null, error: null });
        }
      }),
      delete: () => ({
        eq: (column: string, value: any) => {
          console.log(`üóëÔ∏è Mock delete from ${table} where ${column} = ${value}`);
          return Promise.resolve({ data: null, error: null });
        }
      })
    }),
    auth: {
      getSession: () => Promise.resolve({ data: { session: null }, error: null }),
      signInWithPassword: (credentials: any) => {
        console.log('üîê Mock sign in', credentials);
        return Promise.resolve({ 
          data: { 
            user: { 
              id: 'mock-user-id', 
              email: credentials.email,
              created_at: new Date().toISOString()
            }, 
            session: { 
              access_token: 'mock-token',
              refresh_token: 'mock-refresh-token'
            }
          }, 
          error: null 
        });
      },
      signOut: () => {
        console.log('üö™ Mock sign out');
        return Promise.resolve({ error: null });
      },
      onAuthStateChange: (callback: any) => {
        console.log('üëÇ Mock auth state change listener registered');
        return { data: { subscription: { unsubscribe: () => {} } } };
      }
    },
    storage: {
      from: (bucket: string) => ({
        upload: (path: string, file: File) => {
          console.log(`üì§ Mock upload to ${bucket}/${path}`, file);
          return Promise.resolve({ data: { path }, error: null });
        },
        download: (path: string) => {
          console.log(`üì• Mock download from ${bucket}/${path}`);
          return Promise.resolve({ data: null, error: null });
        }
      })
    }
  } as any;
};

try {
  if (!hasValidConfig) {
    console.warn('‚ö†Ô∏è Supabase configuration incomplete or in demo mode. Using mock client.');
    supabase = createMockClient();
  } else {
    // Create the Supabase client with valid configuration
    supabase = createClient<Database>(supabaseUrl, supabaseKey, {
      auth: {
        autoRefreshToken: true,
        persistSession: true,
        detectSessionInUrl: true
      }
    });
    
    console.log('‚úÖ Supabase client initialized successfully with real configuration');
  }
} catch (error) {
  console.error('üí• Failed to initialize Supabase client:', error);
  
  // Always fall back to mock client on error
  console.warn('üîÑ Falling back to mock Supabase client');
  supabase = createMockClient();
}

// Export the client
export { supabase };

// Export convenience auth hooks
export const auth = supabase.auth;