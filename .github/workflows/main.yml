name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  lint-and-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Lint
        run: npm run lint
      
      - name: Type check
        run: npm run type-check
      
      - name: Run unit tests
        run: npm run test
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN || '' }}
          file: ./coverage/coverage-final.json
          fail_ci_if_error: false

  e2e-tests:
    needs: lint-and-test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Install Playwright
        run: npx playwright install --with-deps
      
      - name: Run E2E tests
        run: npm run test:e2e
        env:
          VITE_SUPABASE_URL: ${{ vars.VITE_SUPABASE_URL }}
          VITE_SUPABASE_ANON_KEY: ${{ vars.VITE_SUPABASE_ANON_KEY }}
      
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: playwright-results
          path: playwright-report/

  build-preview:
    if: github.event_name == 'pull_request'
    needs: [lint-and-test, e2e-tests]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build
        run: npm run build
        env:
          VITE_SUPABASE_URL: ${{ vars.VITE_SUPABASE_URL }}
          VITE_SUPABASE_ANON_KEY: ${{ vars.VITE_SUPABASE_ANON_KEY }}
      
      - name: Deploy Preview to Netlify
        uses: nwtgck/actions-netlify@v2
        with:
          publish-dir: './dist'
          github-token: ${{ secrets.GITHUB_TOKEN }}
          deploy-message: "Deploy preview from GitHub Actions"
          enable-pull-request-comment: true
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
        timeout-minutes: 5

  build-and-deploy:
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: [lint-and-test, e2e-tests]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build
        run: npm run build
        env:
          VITE_SUPABASE_URL: ${{ vars.VITE_SUPABASE_URL }}
          VITE_SUPABASE_ANON_KEY: ${{ vars.VITE_SUPABASE_ANON_KEY }}
          # Other production environment variables
          VITE_SITE_URL: ${{ vars.VITE_SITE_URL }}
          VITE_API_URL: ${{ vars.VITE_API_URL }}
          VITE_OPENAI_API_KEY: ${{ vars.VITE_OPENAI_API_KEY }}
          VITE_ANTHROPIC_API_KEY: ${{ vars.VITE_ANTHROPIC_API_KEY }}
          VITE_GEMINI_API_KEY: ${{ vars.VITE_GEMINI_API_KEY }}
          VITE_ETHERSCAN_API_KEY: ${{ vars.VITE_ETHERSCAN_API_KEY }}
      
      - name: Deploy to Netlify
        uses: nwtgck/actions-netlify@v2
        with:
          publish-dir: './dist'
          production-branch: main
          github-token: ${{ secrets.GITHUB_TOKEN }}
          deploy-message: "Deploy from GitHub Actions"
          enable-commit-comment: true
          production-deploy: true
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
        timeout-minutes: 5

  build-mobile:
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: build-and-deploy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Install Capacitor CLI
        run: npm install -g @capacitor/cli
      
      - name: Build Web
        run: npm run build
        env:
          VITE_SUPABASE_URL: ${{ vars.VITE_SUPABASE_URL }}
          VITE_SUPABASE_ANON_KEY: ${{ vars.VITE_SUPABASE_ANON_KEY }}
      
      - name: Sync Capacitor
        run: npx cap sync
      
      - name: Setup JDK for Android build
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'
      
      - name: Setup Android SDK
        uses: android-actions/setup-android@v2
      
      - name: Build Android Bundle
        run: |
          cd android
          ./gradlew assembleRelease
      
      - name: Upload Android Build
        uses: actions/upload-artifact@v3
        with:
          name: android-app-release
          path: android/app/build/outputs/apk/release/app-release-unsigned.apk
      
      - name: Setup macOS for Electron build
        if: runner.os == 'macOS'
        run: npm run cap:electron
      
      - name: Build Electron App
        if: runner.os == 'macOS'
        run: |
          cd electron
          npm install
          npm run build
      
      - name: Upload Electron Build
        if: runner.os == 'macOS'
        uses: actions/upload-artifact@v3
        with:
          name: electron-app
          path: electron/dist/ 