'use client';

import React, { useState } from 'react';
import { useRouter } from 'next/navigation';
import { 
  BarChart3, 
  TrendingUp,
  TrendingDown,
  DollarSign,
  Calendar,
  Clock,
  Target,
  AlertTriangle,
  Download,
  Filter,
  PieChart,
  Activity,
  Zap,
  Award,
  Trophy,
  Star
} from 'lucide-react';

interface PerformanceMetrics {
  totalReturn: number;
  totalReturnPercent: number;
  sharpeRatio: number;
  maxDrawdown: number;
  winRate: number;
  profitFactor: number;
  avgWin: number;
  avgLoss: number;
  totalTrades: number;
  profitableTrades: number;
  losingTrades: number;
}

interface MonthlyPerformance {
  month: string;
  return: number;
  trades: number;
  winRate: number;
  drawdown: number;
}

interface StrategyPerformance {
  name: string;
  totalReturn: number;
  winRate: number;
  totalTrades: number;
  avgReturn: number;
  maxDrawdown: number;
}

export default function AnalyticsPage() {
  const router = useRouter();
  const [selectedTimeframe, setSelectedTimeframe] = useState('1Y');
  const [selectedMetric, setSelectedMetric] = useState('return');

  // Mock data - in real app this would come from Supabase
  const performanceMetrics: PerformanceMetrics = {
    totalReturn: 15430.50,
    totalReturnPercent: 14.03,
    sharpeRatio: 1.85,
    maxDrawdown: 8.2,
    winRate: 68.5,
    profitFactor: 2.1,
    avgWin: 1250.00,
    avgLoss: -595.00,
    totalTrades: 156,
    profitableTrades: 107,
    losingTrades: 49
  };

  const monthlyPerformance: MonthlyPerformance[] = [
    { month: 'Jan', return: 8.5, trades: 12, winRate: 75, drawdown: 2.1 },
    { month: 'Feb', return: 12.3, trades: 15, winRate: 80, drawdown: 1.8 },
    { month: 'Mar', return: -3.2, trades: 18, winRate: 55, drawdown: 5.2 },
    { month: 'Apr', return: 6.8, trades: 14, winRate: 71, drawdown: 2.5 },
    { month: 'May', return: 9.1, trades: 16, winRate: 69, drawdown: 3.1 },
    { month: 'Jun', return: 4.7, trades: 13, winRate: 62, drawdown: 4.2 },
    { month: 'Jul', return: 11.2, trades: 17, winRate: 76, drawdown: 1.9 },
    { month: 'Aug', return: 7.9, trades: 15, winRate: 73, drawdown: 2.8 },
    { month: 'Sep', return: 5.4, trades: 14, winRate: 64, drawdown: 3.5 },
    { month: 'Oct', return: 8.8, trades: 16, winRate: 75, drawdown: 2.3 },
    { month: 'Nov', return: 6.2, trades: 13, winRate: 69, drawdown: 3.8 },
    { month: 'Dec', return: 9.5, trades: 18, winRate: 78, drawdown: 2.1 }
  ];

  const strategyPerformance: StrategyPerformance[] = [
    {
      name: 'Breakout Momentum',
      totalReturn: 8500.00,
      winRate: 72,
      totalTrades: 45,
      avgReturn: 189.00,
      maxDrawdown: 4.2
    },
    {
      name: 'Mean Reversion',
      totalReturn: 4200.00,
      winRate: 65,
      totalTrades: 38,
      avgReturn: 111.00,
      maxDrawdown: 6.8
    },
    {
      name: 'AI Momentum',
      totalReturn: 2730.50,
      winRate: 68,
      totalTrades: 25,
      avgReturn: 109.00,
      maxDrawdown: 3.5
    }
  ];

  const timeframes = ['1M', '3M', '6M', '1Y', 'ALL'];
  const metrics = ['return', 'trades', 'winrate', 'drawdown'];

  const getMetricColor = (value: number, isPositive: boolean = true) => {
    if (!isPositive) return value >= 0 ? 'text-green-400' : 'text-red-400';
    return value >= 0 ? 'text-green-400' : 'text-red-400';
  };

  const getMetricIcon = (value: number, isPositive: boolean = true) => {
    if (!isPositive) return value >= 0 ? <TrendingUp className="h-4 w-4" /> : <TrendingDown className="h-4 w-4" />;
    return value >= 0 ? <TrendingUp className="h-4 w-4" /> : <TrendingDown className="h-4 w-4" />;
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-900 via-purple-900 to-slate-900">
      <div className="container mx-auto px-4 py-8">
        {/* Header */}
        <div className="flex items-center justify-between mb-8">
          <div>
            <h1 className="text-3xl font-bold text-white mb-2 flex items-center">
              <BarChart3 className="h-8 w-8 text-purple-400 mr-3" />
              Advanced Analytics & Performance
            </h1>
            <p className="text-slate-300">Comprehensive trading analytics and performance insights</p>
          </div>
          <div className="flex items-center gap-3">
            <button
              onClick={() => router.push('/modules/analytics/export')}
              className="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg font-medium flex items-center transition-colors"
            >
              <Download className="h-4 w-4 mr-2" />
              Export Report
            </button>
            <button
              onClick={() => router.push('/modules/analytics/compare')}
              className="bg-green-600 hover:bg-green-700 text-white px-4 py-2 rounded-lg font-medium flex items-center transition-colors"
            >
              <Activity className="h-4 w-4 mr-2" />
              Compare Strategies
            </button>
          </div>
        </div>

        {/* Performance Overview */}
        <div className="grid grid-cols-1 md:grid-cols-4 gap-6 mb-8">
          <div className="bg-slate-800/50 border border-slate-700 rounded-lg p-6">
            <span className="text-slate-400 text-sm">Total Return</span>
            <div className="text-2xl font-bold text-white">
              ${performanceMetrics.totalReturn.toLocaleString()}
            </div>
            <div className="flex items-center gap-1 mt-1">
              {getMetricIcon(performanceMetrics.totalReturnPercent)}
              <span className={getMetricColor(performanceMetrics.totalReturnPercent)}>
                +{performanceMetrics.totalReturnPercent}%
              </span>
            </div>
          </div>
          
          <div className="bg-slate-800/50 border border-slate-700 rounded-lg p-6">
            <span className="text-slate-400 text-sm">Sharpe Ratio</span>
            <div className="text-2xl font-bold text-white">{performanceMetrics.sharpeRatio}</div>
            <div className="text-slate-400 text-sm mt-1">
              Risk-adjusted return
            </div>
          </div>
          
          <div className="bg-slate-800/50 border border-slate-700 rounded-lg p-6">
            <span className="text-slate-400 text-sm">Win Rate</span>
            <div className="text-2xl font-bold text-white">{performanceMetrics.winRate}%</div>
            <div className="text-slate-400 text-sm mt-1">
              {performanceMetrics.profitableTrades}/{performanceMetrics.totalTrades} trades
            </div>
          </div>
          
          <div className="bg-slate-800/50 border border-slate-700 rounded-lg p-6">
            <span className="text-slate-400 text-sm">Max Drawdown</span>
            <div className="text-2xl font-bold text-red-400">-{performanceMetrics.maxDrawdown}%</div>
            <div className="text-slate-400 text-sm mt-1">
              Peak to trough
            </div>
          </div>
        </div>

        {/* Filters */}
        <div className="bg-slate-800/50 border border-slate-700 rounded-lg p-6 mb-8">
          <div className="flex flex-wrap gap-4">
            <div>
              <label className="block text-sm font-medium text-white mb-2">Timeframe</label>
              <div className="flex flex-wrap gap-2">
                {timeframes.map(timeframe => (
                  <button
                    key={timeframe}
                    onClick={() => setSelectedTimeframe(timeframe)}
                    className={`px-3 py-1 rounded-full text-sm font-medium transition-colors ${
                      selectedTimeframe === timeframe
                        ? 'bg-blue-600 text-white'
                        : 'bg-slate-700 text-slate-300 hover:bg-slate-600'
                    }`}
                  >
                    {timeframe}
                  </button>
                ))}
              </div>
            </div>
            <div>
              <label className="block text-sm font-medium text-white mb-2">Metric</label>
              <div className="flex flex-wrap gap-2">
                {metrics.map(metric => (
                  <button
                    key={metric}
                    onClick={() => setSelectedMetric(metric)}
                    className={`px-3 py-1 rounded-full text-sm font-medium transition-colors ${
                      selectedMetric === metric
                        ? 'bg-blue-600 text-white'
                        : 'bg-slate-700 text-slate-300 hover:bg-slate-600'
                    }`}
                  >
                    {metric.charAt(0).toUpperCase() + metric.slice(1)}
                  </button>
                ))}
              </div>
            </div>
          </div>
        </div>

        <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
          {/* Left Column - Charts & Performance */}
          <div className="lg:col-span-2 space-y-6">
            {/* Monthly Performance Chart */}
            <div className="bg-slate-800/50 border border-slate-700 rounded-lg p-6">
              <h2 className="text-xl font-semibold text-white mb-4 flex items-center">
                <TrendingUp className="h-5 w-5 text-blue-400 mr-2" />
                Monthly Performance
              </h2>
              <div className="h-64 flex items-end justify-between gap-2">
                {monthlyPerformance.map((month, index) => (
                  <div key={month.month} className="flex-1 flex flex-col items-center">
                    <div className="text-xs text-slate-400 mb-2">{month.return}%</div>
                    <div 
                      className={`w-full rounded-t transition-all ${
                        month.return >= 0 ? 'bg-green-500' : 'bg-red-500'
                      }`}
                      style={{ height: `${Math.abs(month.return) * 2}px` }}
                    ></div>
                    <div className="text-xs text-slate-400 mt-2">{month.month}</div>
                  </div>
                ))}
              </div>
            </div>

            {/* Strategy Performance */}
            <div className="bg-slate-800/50 border border-slate-700 rounded-lg p-6">
              <h2 className="text-xl font-semibold text-white mb-4 flex items-center">
                <Trophy className="h-5 w-5 text-yellow-400 mr-2" />
                Strategy Performance
              </h2>
              <div className="space-y-4">
                {strategyPerformance.map(strategy => (
                  <StrategyPerformanceCard key={strategy.name} strategy={strategy} />
                ))}
              </div>
            </div>
          </div>

          {/* Right Column - Detailed Metrics */}
          <div className="space-y-6">
            {/* Key Metrics */}
            <div className="bg-slate-800/50 border border-slate-700 rounded-lg p-6">
              <h2 className="text-xl font-semibold text-white mb-4 flex items-center">
                <Zap className="h-5 w-5 text-yellow-400 mr-2" />
                Key Metrics
              </h2>
              <div className="space-y-4">
                <div className="flex justify-between">
                  <span className="text-slate-400">Profit Factor:</span>
                  <span className="text-white font-medium">{performanceMetrics.profitFactor}</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-slate-400">Avg Win:</span>
                  <span className="text-green-400 font-medium">${performanceMetrics.avgWin.toLocaleString()}</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-slate-400">Avg Loss:</span>
                  <span className="text-red-400 font-medium">${Math.abs(performanceMetrics.avgLoss).toLocaleString()}</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-slate-400">Total Trades:</span>
                  <span className="text-white font-medium">{performanceMetrics.totalTrades}</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-slate-400">Profitable:</span>
                  <span className="text-green-400 font-medium">{performanceMetrics.profitableTrades}</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-slate-400">Losing:</span>
                  <span className="text-red-400 font-medium">{performanceMetrics.losingTrades}</span>
                </div>
              </div>
            </div>

            {/* Performance Distribution */}
            <div className="bg-slate-800/50 border border-slate-700 rounded-lg p-6">
              <h2 className="text-xl font-semibold text-white mb-4">Performance Distribution</h2>
              <div className="space-y-3">
                <div className="flex items-center justify-between">
                  <span className="text-slate-400 text-sm">Excellent (>10%)</span>
                  <div className="flex items-center gap-2">
                    <div className="w-16 bg-slate-700 rounded-full h-2">
                      <div className="bg-green-500 h-2 rounded-full" style={{ width: '25%' }}></div>
                    </div>
                    <span className="text-white text-sm">25%</span>
                  </div>
                </div>
                <div className="flex items-center justify-between">
                  <span className="text-slate-400 text-sm">Good (5-10%)</span>
                  <div className="flex items-center gap-2">
                    <div className="w-16 bg-slate-700 rounded-full h-2">
                      <div className="bg-blue-500 h-2 rounded-full" style={{ width: '40%' }}></div>
                    </div>
                    <span className="text-white text-sm">40%</span>
                  </div>
                </div>
                <div className="flex items-center justify-between">
                  <span className="text-slate-400 text-sm">Average (0-5%)</span>
                  <div className="flex items-center gap-2">
                    <div className="w-16 bg-slate-700 rounded-full h-2">
                      <div className="bg-yellow-500 h-2 rounded-full" style={{ width: '20%' }}></div>
                    </div>
                    <span className="text-white text-sm">20%</span>
                  </div>
                </div>
                <div className="flex items-center justify-between">
                  <span className="text-slate-400 text-sm">Poor (<0%)</span>
                  <div className="flex items-center gap-2">
                    <div className="w-16 bg-slate-700 rounded-full h-2">
                      <div className="bg-red-500 h-2 rounded-full" style={{ width: '15%' }}></div>
                    </div>
                    <span className="text-white text-sm">15%</span>
                  </div>
                </div>
              </div>
            </div>

            {/* Achievements */}
            <div className="bg-slate-800/50 border border-slate-700 rounded-lg p-6">
              <h2 className="text-xl font-semibold text-white mb-4 flex items-center">
                <Award className="h-5 w-5 text-yellow-400 mr-2" />
                Achievements
              </h2>
              <div className="space-y-3">
                <div className="flex items-center gap-3 p-2 bg-yellow-600/20 border border-yellow-600/30 rounded-lg">
                  <Star className="h-4 w-4 text-yellow-400" />
                  <div>
                    <div className="text-white text-sm font-medium">Consistent Winner</div>
                    <div className="text-slate-400 text-xs">Win rate > 65% for 3 months</div>
                  </div>
                </div>
                <div className="flex items-center gap-3 p-2 bg-green-600/20 border border-green-600/30 rounded-lg">
                  <Star className="h-4 w-4 text-green-400" />
                  <div>
                    <div className="text-white text-sm font-medium">Risk Manager</div>
                    <div className="text-slate-400 text-xs">Max drawdown < 10%</div>
                  </div>
                </div>
                <div className="flex items-center gap-3 p-2 bg-blue-600/20 border border-blue-600/30 rounded-lg">
                  <Star className="h-4 w-4 text-blue-400" />
                  <div>
                    <div className="text-white text-sm font-medium">Sharpe Master</div>
                    <div className="text-slate-400 text-xs">Sharpe ratio > 1.5</div>
                  </div>
                </div>
              </div>
            </div>

            {/* Quick Actions */}
            <div className="bg-slate-800/50 border border-slate-700 rounded-lg p-6">
              <h3 className="text-lg font-semibold text-white mb-4">Quick Actions</h3>
              <div className="space-y-3">
                <button
                  onClick={() => router.push('/modules/analytics/detailed-report')}
                  className="w-full bg-purple-600 hover:bg-purple-700 text-white py-2 px-4 rounded-lg font-medium flex items-center justify-center transition-colors"
                >
                  <BarChart3 className="h-4 w-4 mr-2" />
                  Detailed Report
                </button>
                <button
                  onClick={() => router.push('/modules/analytics/benchmark')}
                  className="w-full bg-blue-600 hover:bg-blue-700 text-white py-2 px-4 rounded-lg font-medium flex items-center justify-center transition-colors"
                >
                  <Target className="h-4 w-4 mr-2" />
                  Benchmark Analysis
                </button>
                <button
                  onClick={() => router.push('/modules/analytics/optimization')}
                  className="w-full bg-green-600 hover:bg-green-700 text-white py-2 px-4 rounded-lg font-medium flex items-center justify-center transition-colors"
                >
                  <Zap className="h-4 w-4 mr-2" />
                  Strategy Optimization
                </button>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}

function StrategyPerformanceCard({ strategy }: { strategy: StrategyPerformance }) {
  const router = useRouter();

  return (
    <div className="bg-slate-700/50 border border-slate-600 rounded-lg p-4 hover:bg-slate-700/70 transition-colors cursor-pointer"
         onClick={() => router.push(`/modules/analytics/strategy/${strategy.name}`)}>
      <div className="flex items-center justify-between mb-3">
        <div>
          <h3 className="text-white font-medium">{strategy.name}</h3>
          <div className="text-slate-400 text-sm">{strategy.totalTrades} trades</div>
        </div>
        <div className="text-right">
          <div className="text-lg font-semibold text-green-400">
            ${strategy.totalReturn.toLocaleString()}
          </div>
          <div className="text-slate-400 text-sm">Total Return</div>
        </div>
      </div>

      <div className="grid grid-cols-3 gap-4 text-sm">
        <div>
          <div className="text-slate-400">Win Rate</div>
          <div className="text-white font-medium">{strategy.winRate}%</div>
        </div>
        <div>
          <div className="text-slate-400">Avg Return</div>
          <div className="text-white font-medium">${strategy.avgReturn}</div>
        </div>
        <div>
          <div className="text-slate-400">Max DD</div>
          <div className="text-red-400 font-medium">-{strategy.maxDrawdown}%</div>
        </div>
      </div>
    </div>
  );
} 